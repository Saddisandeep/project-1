# -*- coding: utf-8 -*-
"""project 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p3dbGNDv6dRBosXKmd8h3afvZ11pTY4m

## ALL Necessary Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
from sklearn.model_selection import train_test_split
import nltk
import string
from wordcloud import WordCloud

nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))

""" ## loading the dataset"""

movies_df = pd.read_csv("movies.csv")
reviews_df = pd.read_csv("ratings.csv")

"""## merging both the datasets"""

merged_df = pd.merge(movies_df, reviews_df, on="movieId", how="left")
avg_ratings = merged_df.groupby("movieId")["rating"].mean().reset_index()
avg_ratings.rename(columns={"rating": "avg_rating"}, inplace=True)
movies_df = pd.merge(movies_df, avg_ratings, on="movieId", how="left")
movies_df["avg_rating"].fillna(movies_df["avg_rating"].median(), inplace=True)
movies_df["combined_features"] = movies_df["title"] + " " + movies_df["genres"]

"""## Checking Basic Information"""

print("INFO:\n", merged_df.info())

print("\nDESCRIBE:\n", merged_df.describe())

print("\nHEAD:\n", merged_df.head())

"""## Checking Missing Values"""

print("\nNULL VALUES:\n", merged_df.isnull().sum())

"""## Cleaning stopwords"""

def clean_text(text):
    if isinstance(text, str):
        text = text.lower()
        text = text.translate(str.maketrans('', '', string.punctuation))
        words = text.split()
        words = [word for word in words if word not in stop_words]
        return ' '.join(words)
    return ""

movies_df["clean_features"] = movies_df["combined_features"].apply(clean_text)

"""## Anaysis"""

movies_subset = movies_df.sample(frac=0.4, random_state=42)
tfidf = TfidfVectorizer(max_features=5000)
tfidf_matrix = tfidf.fit_transform(movies_subset["clean_features"])

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

"""## Word Cloud"""

all_words = ' '.join(movies_df["clean_features"].dropna())
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_words)

plt.figure(figsize=(12, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("Most Common Words in Movies", fontsize=16)
plt.show()

"""## Visualization"""

plt.figure(figsize=(10, 5))
sns.histplot(movies_df["avg_rating"], bins=10, kde=True)
plt.title("Distribution of Movie Ratings")
plt.show()

def plot_genre_distribution(movies_df):
    genre_list = movies_df['genres'].str.split('|').explode()
    genre_counts = genre_list.value_counts()

    plt.figure(figsize=(12, 6))
    sns.barplot(x=genre_counts.index, y=genre_counts.values, palette='viridis')
    plt.xticks(rotation=45)
    plt.title("ðŸ“Š Distribution of Movie Genres")
    plt.xlabel("Genres")
    plt.ylabel("Number of Movies")
    plt.tight_layout()
    plt.show()

plot_genre_distribution(movies_df)

def plot_top_movies_in_genre(movies_df, genre, top_n=10):
    genre = genre.lower()
    genre_matches = movies_df[movies_df['genres'].str.lower().str.contains(genre)]
    if genre_matches.empty:
        print(f"No movies found for genre: {genre}")
        return
    top_movies = genre_matches.sort_values(by='avg_rating', ascending=False).head(top_n)

    plt.figure(figsize=(10, 5))
    sns.barplot(x='avg_rating', y='title', data=top_movies, palette='magma')
    plt.title(f"ðŸŽ¬ Top {top_n} Rated Movies in Genre: {genre.title()}")
    plt.xlabel("Average Rating")
    plt.ylabel("Movie Title")
    plt.tight_layout()
    plt.show()

genre = "comedy"
top_n = 5
plot_top_movies_in_genre(movies_df, genre, top_n=top_n)

"""## Predictions"""

def recommend_by_genre(genre_query, top_n=10):
    genre_query = genre_query.lower()
    genre_matches = movies_subset[movies_subset['genres'].str.lower().str.contains(genre_query)]
    if genre_matches.empty:
        print(f"No movies found for genre: {genre_query}")
        return []
    top_movies = genre_matches.sort_values(by='avg_rating', ascending=False).head(top_n)
    return top_movies[['title', 'genres', 'avg_rating']]

genre = "comedy"
top_n = 5
genre_results = recommend_by_genre(genre, top_n=top_n)

print(f"\nðŸŽ¬ Top {top_n} Recommended Movies in Genre '{genre.title()}':\n")
print(genre_results)